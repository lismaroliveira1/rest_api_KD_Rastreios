---
swagger: "2.0"
info:
  description: This APi is used for KD Rastreios Application
  version: 1.0.0
  title: KD Rastreios API
  termsOfService: http://swagger.io/terms/
  contact:
    name: Lismar Oliveira
    email: englismaroliveira@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
host: virtserver.swaggerhub.com
basePath: /lismaroliveira/kdrastreios/1.0.0
tags:
- name: user
  description: All operations about users
  externalDocs:
    description: Find out more
    url: http://swagger.io
- name: packages
  description: All operations about the packages
  externalDocs:
    description: Find out more
    url: http://swagger.io
- name: trackings
  description: All operations about the tracking packages
  externalDocs:
    description: Find out more about our store
    url: http://swagger.io
schemes:
- https
- http
paths:
  /signup:
    post:
      tags:
      - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: Create user object
        required: true
        schema:
          $ref: '#/definitions/body'
      responses:
        "201":
          description: User fulano was created successfully
          schema:
            $ref: '#/definitions/inline_response_201'
        "401":
          description: The user already exists
          schema:
            $ref: '#/definitions/inline_response_401'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/inline_response_401'
  /signin:
    post:
      tags:
      - user
      summary: Logs user into the system
      operationId: login_user
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: Create user object
        required: true
        schema:
          $ref: '#/definitions/body_1'
      responses:
        "201":
          description: User fulano was logged successfully
          schema:
            $ref: '#/definitions/inline_response_201'
        "401":
          description: Invalid username/password supplied
          schema:
            $ref: '#/definitions/inline_response_201'
  /signout:
    post:
      tags:
      - user
      summary: Logs out current logged in user session
      operationId: signout
      produces:
      - application/json
      parameters: []
      responses:
        "200":
          description: successful operation
          schema:
            $ref: '#/definitions/inline_response_401'
  /user/{username}:
    get:
      tags:
      - user
      summary: Get user by user name
      operationId: getUserByName
      produces:
      - application/json
      - application/xml
      parameters:
      - name: username
        in: path
        description: The name that needs to be fetched. Use user1 for testing.
        required: true
        type: string
      responses:
        "200":
          description: successful operation
          schema:
            $ref: '#/definitions/User'
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
    delete:
      tags:
      - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      produces:
      - application/json
      parameters:
      - name: username
        in: path
        description: The name that needs to be deleted
        required: true
        type: string
      responses:
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
  /packages/{user_id}:
    get:
      tags:
      - packages
      summary: Find all the packages filtered by
      description: Returns all the package's user object
      operationId: get_packages
      produces:
      - application/json
      parameters:
      - name: user_id
        in: path
        description: ID of pet to return
        required: true
        type: integer
        format: int64
      responses:
        "200":
          description: successful operation
          schema:
            $ref: '#/definitions/inline_response_200'
        "500":
          description: Internal server error
  /packages{package_code}:
    post:
      tags:
      - packages
      summary: Create a new package
      description: Create package object
      operationId: create_package
      produces:
      - application/json
      parameters:
      - name: package_code
        in: path
        description: ID of pet to return
        required: true
        type: integer
        format: int64
      - in: body
        name: body
        description: Create user object
        required: true
        schema:
          $ref: '#/definitions/body_2'
      responses:
        "200":
          description: successful operation
          schema:
            $ref: '#/definitions/inline_response_200'
        "500":
          description: Internal server error
      security:
      - api_key: []
securityDefinitions:
  petstore_auth:
    type: oauth2
    authorizationUrl: http://petstore.swagger.io/oauth/dialog
    flow: implicit
    scopes:
      write:pets: modify pets in your account
      read:pets: read your pets
  api_key:
    type: apiKey
    name: api_key
    in: header
definitions:
  Order:
    type: object
    properties:
      id:
        type: integer
        format: int64
      petId:
        type: integer
        format: int64
      quantity:
        type: integer
        format: int32
      shipDate:
        type: string
        format: date-time
      status:
        type: string
        description: Order Status
        enum:
        - placed
        - approved
        - delivered
      complete:
        type: boolean
        default: false
    xml:
      name: Order
  Category:
    type: object
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
    xml:
      name: Category
  User:
    type: object
    properties:
      id:
        type: integer
        format: int64
      username:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      email:
        type: string
      password:
        type: string
      phone:
        type: string
      userStatus:
        type: integer
        format: int32
        description: User Status
    xml:
      name: User
  Tag:
    type: object
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
    xml:
      name: Tag
  Pet:
    type: object
    required:
    - name
    - photoUrls
    properties:
      id:
        type: integer
        format: int64
      category:
        $ref: '#/definitions/Category'
      name:
        type: string
        example: doggie
      photoUrls:
        type: array
        xml:
          name: photoUrl
          wrapped: true
        items:
          type: string
      tags:
        type: array
        xml:
          name: tag
          wrapped: true
        items:
          $ref: '#/definitions/Tag'
      status:
        type: string
        description: pet status in the store
        enum:
        - available
        - pending
        - sold
    xml:
      name: Pet
  ApiResponse:
    type: object
    properties:
      code:
        type: integer
        format: int32
      type:
        type: string
      message:
        type: string
  body:
    type: object
    required:
    - email
    - password
    - userName
    properties:
      userName:
        type: string
      email:
        type: string
      password:
        type: string
  inline_response_201:
    type: object
    properties:
      message:
        type: string
      access_token:
        type: string
      uid:
        type: string
      created_at:
        type: string
  inline_response_401:
    type: object
    properties:
      message:
        type: string
  body_1:
    type: object
    required:
    - email
    - password
    properties:
      email:
        type: string
      password:
        type: string
  inline_response_200_trackings:
    type: object
    properties:
      id:
        type: integer
      date:
        type: string
      destiny:
        type: string
      hour:
        type: string
      origin:
        type: string
      status:
        type: string
  inline_response_200:
    type: object
    properties:
      package_code:
        type: string
      name:
        type: string
      user_id:
        type: string
      trackings:
        type: array
        example:
        - id: 0
          date: 05/08/2021
          destiny: Salvador, BA
          hour: 892
          origin: Rio das Ostras. RJ
          status: A caminho
        - id: 1
          date: 05/08/2021
          destiny: Salvador, BA
          hour: 892
          origin: Rio das Ostras. RJ
          status: Objeto entregue ao destinat√°rio
        items:
          $ref: '#/definitions/inline_response_200_trackings'
  body_2:
    type: object
    properties:
      email:
        type: string
      password:
        type: string
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
